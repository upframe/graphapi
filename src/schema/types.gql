interface Person {
  id: ID!
  name: String!
  email: String
  profilePictures: [ProfilePicture]
  social: SocialLinks
}

type User implements Person {
  id: ID!
  name: String!
  email: String @private
  profilePictures: [ProfilePicture]
  social: SocialLinks
}

type Mentor implements Person {
  id: ID!
  name: String!
  email: String @private
  keycode: String!
  role: String
  company: String
  location: String
  website: String
  bio: String
  profilePictures: [ProfilePicture!]!
  social: SocialLinks
  tags: [String!]!
  visibility: Visibility @private
  notificationPrefs: NotificationPreferences @private
  slots(after: String, before: String): [Slot!]!
}

type Meetup {
  start: String
  location: String
  mentor: Mentor
  mentee: Person
}

enum Visibility {
  LISTED
  UNLISTED
}

type Slot {
  id: ID!
  start: String!
  duration: Int
}

type NotificationPreferences {
  receiveEmails: Boolean
  slotReminder: EmailInterval
}

enum EmailInterval {
  MONTHLY
  WEEKLY
  OFF
}

type ProfilePicture {
  size: Int
  type: String
  url: String
}

type SocialLinks {
  dribbble: String
  facebook: String
  github: String
  linkedin: String
  twitter: String
}
