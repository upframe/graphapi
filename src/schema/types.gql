interface Person {
  id: ID!
  handle: String
  name: String!
  email: String
  location: String
  profilePictures: [ProfilePicture]
  social(includeEmpty: Boolean = false): [SocialHandle!]
  notificationPrefs: NotificationPreferences
  biography: String
  tags: [Tag!]
  website: String
  categories: [String!]
  role: Role
  invites: [Invite]
  google: Google
  searchable: Boolean
}

type User implements Person {
  id: ID!
  handle: String
  name: String!
  email: String
  location: String
  profilePictures: [ProfilePicture]
  social(includeEmpty: Boolean = false): [SocialHandle!]
  notificationPrefs: UserNotificationPreferences
  biography: String
  tags: [Tag!]
  website: String
  categories: [String!]
  role: Role
  invites: [Invite]
  google: Google
  searchable: Boolean
}

type Mentor implements Person {
  id: ID!
  handle: String!
  name: String!
  email: String
  title: String
  company: String
  location: String
  website: String
  biography: String
  profilePictures: [ProfilePicture!]!
  social(includeEmpty: Boolean = false): [SocialHandle!]
  tags: [Tag!]
  visibility: Visibility
  notificationPrefs: MentorNotificationPreferences
  slots(after: String, before: String, includeBooked: Boolean = false): [Slot!]!
  calendars(ids: [ID!]): [Calendar!]
  calendarConnected: Boolean
  categories: [String!]
  role: Role
  invites: [Invite]
  google: Google
  searchable: Boolean
}

type Calendar {
  id: ID!
  name: String
  description: String
  color: String
  events(max: Int = 100, start: String = "today"): [Event!]
}

type Event {
  id: ID!
  name: String
  description: String
  start: String
  end: String
}

type Meetup {
  start: String
  location: String
  mentor: Mentor
  mentee: Person
}

enum Visibility {
  LISTED
  UNLISTED
}

type Slot {
  id: ID!
  start: String!
  end: String
}

interface NotificationPreferences {
  receiveEmails: Boolean
}

type UserNotificationPreferences implements NotificationPreferences {
  receiveEmails: Boolean
}

type MentorNotificationPreferences implements NotificationPreferences {
  receiveEmails: Boolean
  slotReminder: EmailInterval
}

enum EmailInterval {
  MONTHLY
  WEEKLY
  OFF
}

type ProfilePicture {
  size: Int
  type: String
  url: String
}

type SocialHandle {
  id: Int!
  name: String
  url: String
  handle: String
}

enum Role {
  USER
  MENTOR
  NOLOGIN
  ADMIN
}

type Tag {
  id: Int!
  name: String!
  users: [User!]
}

enum TagOrder {
  alpha
  users
}

type List {
  id: Int
  name: String!
  users: [Person!]
}

scalar Upload

type SearchResult {
  users: [UserSearchResult!]
  tags: [TagSearchResult!]
}

type UserSearchResult {
  user: Person!
  markup: String
}

type TagSearchResult {
  tag: Tag!
  markup: String
}

type Invite {
  email: String
  role: Role
  status: InviteStatus
}

enum InviteStatus {
  PENDING
  JOINED
}

type SignUpInfo {
  id: ID!
  email: String
  role: Role
  authComplete: Boolean
  name: String
  picture: ProfilePicture
  defaultPicture: ProfilePicture
}

type Validity {
  field: String
  valid: Boolean!
  reason: String
}

type Google {
  connected: Boolean
  email: String
  canDisconnect: Boolean
}
