type Conversation {
  id: ID!
  participants(includeMe: Boolean = false): [Person!]!
  channels: [Channel!]!
  created: String
  lastUpdate: String
}

type Channel {
  id: ID!
  conversationId: ID!
  messages(
    first: Int
    last: Int
    before: ID
    after: ID
  ): ChannelMessageConnection!
  created: String
  lastUpdate: String
  slot: ChannelSlot
}

type ChannelMessageConnection implements Connection {
  edges: [ChannelMessageEdge!]!
  pageInfo: PageInfo!
}

type ChannelMessageEdge implements Edge {
  node: Message
  cursor: ID!
}

type Message implements Node {
  id: ID!
  content(fallback: Boolean = false): String
  markup: String
  author: ID!
  time: String!
  channel: ID!
}

type Unread {
  channelId: ID!
  unread: [ID!]!
}

type Read {
  userId: ID!
  channelId: ID!
  msgId: ID!
}

type ChannelSlot {
  id: ID!
  time: String!
  mentor: Person!
  mentee: Person!
  status: ChannelSlotStatus
}

enum ChannelSlotStatus {
  PENDING
  CONFIRMED
  DECLINED
  EXPIRED
}
