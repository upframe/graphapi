service: graphapi

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 20
  region: eu-west-1
  vpc:
    securityGroupIds:
      - ${ssm:/API/SecurityGroup}
    subnetIds:
      - ${ssm:/API/Subnet}
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource:
        - ${ssm:/email/SNS/arn}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: ${ssm:/dynamodb/redirects/arn}

functions:
  graphapi:
    handler: src/handler.graphapi
    provisionedConcurrency: ${file(./sls.conf.js):PROVISIONED}
    layers:
      - arn:aws:lambda:eu-west-1:464622532012:layer:Datadog-Node12-x:23
    events:
      - http:
          path: /
          method: post
          cors:
            origins:
              - https://beta.upframe.io
              - https://upframe.io
            allowCredentials: true
      - http:
          path: /
          method: get
          cors:
            origins:
              - https://beta.upframe.io
              - https://upframe.io
            allowCredentials: true

    environment:
      stage: ${self:provider.stage}
      PUBLIC_KEY: ${ssm:/API/PublicKey}
      PRIVATE_KEY: ${ssm:/API/PrivateKey~true}
      APOLLO_KEY: ${ssm:/API/ApolloKey~true}
      MAILGUN_KEY: ${ssm:/API/MailgunKey~true}
      OAUTH_CLIENT_ID: ${ssm:/API/OAuth/ClientId}
      OAUTH_CLIENT_SECRET: ${ssm:/API/OAuth/ClientSecret~true}
      CALENDAR_ID: ${ssm:/API/CalendarId}
      CALENDAR_REFRESH_TOKEN: ${ssm:/API/CalendarRefreshToken~true}
      AWS_KEY_ID: ${ssm:/API/AwsKeyId}
      AWS_KEY_SECRET: ${ssm:/API/AwsKeySecret~true}
      BUCKET_NAME: ${ssm:/API/ProfilePictures/BucketName}
      BUCKET_URL: ${ssm:/API/ProfilePictures/BucketUrl}
      DEV_PASSWORD: ${ssm:/API/DevPassword~true}
      EMAIL_SNS: ${ssm:/email/SNS/arn}

      DB_HOST: ${ssm:/DB/Host}
      DB_PROXY_HOST: ${ssm:/DB/Proxy/Host}
      DB_PORT: ${ssm:/DB/Port}
      DB_NAME: ${ssm:/DB/Name}
      DB_USER: ${ssm:/API/DB/User}
      DB_PASSWORD: ${ssm:/API/DB/Password~true}

      DD_API_KEY: ${ssm:/API/Datadog/ApiKey}
      DD_SERVICE: ${file(./sls.conf.js):DD_SERVICE}
      DD_FLUSH_TO_LOG: ${file(./sls.conf.js):DD_FLUSH}
      DD_ENHANCED_METRICS: ${file(./sls.conf.js):DD_ENHANCED}
      DD_LOGS_INJECTION: ${file(./sls.conf.js):DD_LOG_INJECT}
      DD_ENV: ${file(./sls.conf.js):DD_ENV}

  wsConnect:
    handler: src/messaging/handler.wsConnect
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

  message:
    handler: src/messaging/handler.message
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn: !GetAtt
            - messages
            - StreamArn

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-dynamodb-streams
  - serverless-offline
  - serverless-domain-manager

custom:
  serverless-offline:
    port: 5000
    stage: offline
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
        - datadog-lambda-js
        - dd-trace
  customDomain:
    RestApiId:
      Ref: ApiGatewayRestApi
    domainName: ${file(./sls.conf.js):DOMAIN}
    endpointType: 'regional'
    stage: ${opt:stage}
    createRoute53Record: false
  serverless-offline-sns:
    port: 4002
    debug: true
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      host: localhost
      port: 8000
      migrate: true
  serverless-offline-dynamodb-streams:
    endpoint: http://0.0.0.0:8000
    skipCacheInvalidation: false
    readInterval: 500

resources:
  Resources:
    messages:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: messages
        AttributeDefinitions:
          - AttributeName: channel
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: channel
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    connections:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connections
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
