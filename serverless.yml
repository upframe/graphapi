service: graphapi

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 20
  region: eu-west-1
  vpc:
    securityGroupIds:
      - ${ssm:/API/SecurityGroup}
    subnetIds:
      - ${ssm:/API/Subnet}
  tracing:
    apiGateway: true
    lambda: true

functions:
  graphapi:
    handler: src/handler.graphapi
    provisionedConcurrency: 1
    layers:
      - arn:aws:lambda:eu-west-1:464622532012:layer:Datadog-Node12-x:23
    events:
      - http:
          path: /
          method: post
          cors:
            origins:
              - https://beta.upframe.io
              - https://upframe.io
            allowCredentials: true
      - http:
          path: /
          method: get
          cors:
            origins:
              - https://beta.upframe.io
              - https://upframe.io
            allowCredentials: true

    environment:
      stage: ${self:provider.stage}
      PUBLIC_KEY: ${ssm:/API/PublicKey}
      PRIVATE_KEY: ${ssm:/API/PrivateKey~true}
      APOLLO_KEY: ${ssm:/API/ApolloKey~true}
      MAILGUN_KEY: ${ssm:/API/MailgunKey~true}
      OAUTH_CLIENT_ID: ${ssm:/API/OAuth/ClientId}
      OAUTH_CLIENT_SECRET: ${ssm:/API/OAuth/ClientSecret~true}
      CALENDAR_ID: ${ssm:/API/CalendarId}
      CALENDAR_REFRESH_TOKEN: ${ssm:/API/CalendarRefreshToken~true}
      AWS_KEY_ID: ${ssm:/API/AwsKeyId}
      AWS_KEY_SECRET: ${ssm:/API/AwsKeySecret~true}
      BUCKET_NAME: ${ssm:/API/PhotoBucket}
      DEV_PASSWORD: ${ssm:/API/DevPassword~true}

      DB_HOST: ${ssm:/DB/Host}
      DB_PROXY_HOST: ${ssm:/DB/Proxy/Host}
      DB_PORT: ${ssm:/DB/Port}
      DB_NAME: ${ssm:/DB/Name}
      DB_USER: ${ssm:/API/DB/User}
      DB_PASSWORD: ${ssm:/API/DB/Password~true}

      DD_SERVICE: graphapi
      DD_API_KEY: ${ssm:/API/Datadog/ApiKey}
      DD_FLUSH_TO_LOG: ${file(./sls.conf.js):DD_FLUSH}
      DD_ENHANCED_METRICS: ${file(./sls.conf.js):DD_ENHANCED}
      DD_LOGS_INJECTION: ${file(./sls.conf.js):DD_LOG_INJECT}
      DD_ENV: ${file(./sls.conf.js):DD_ENV}

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  serverless-offline:
    port: 5000
    stage: offline
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
        - datadog-lambda-js
        - dd-trace
  customDomain:
    RestApiId:
      Ref: ApiGatewayRestApi
    domainName: dev.graphapi.upframe.io
    endpointType: 'regional'
    stage: ${opt:stage}
    createRoute53Record: false
